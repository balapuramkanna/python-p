{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dh0To6pv7Xsn"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#1)**Explain About Variables** ?\n",
        "  -Python variables are simply containers for storing data values.\n",
        "  \n",
        "   -Variable is a name which is used to refer Memory Allocation.\n",
        "\n",
        "  -Variable names can be a group of both the letters and digits But they have to begin with a letter or an underscore."
      ],
      "metadata": {
        "id": "gkeHktf3-C7t"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ramu = 100\n",
        "somu = 1200\n",
        "print(ramu)\n",
        "print(somu)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "saGDDXG1_A55",
        "outputId": "8a724e33-cbcc-4ef6-ced6-f64fd7e4dbec"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "100\n",
            "1200\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##2) **Rules of Variables** ?\n",
        "   - variables can be written in alpha-numeric structure\n",
        "   -varaible can't start with special characters except underscore\n",
        "   -varaible can't start with digits\n",
        "   -varaible can't start with keywords\n",
        "     this are case sensitive"
      ],
      "metadata": {
        "id": "K4dmfEb-_eT7"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        " ###3)**Types of Variables**?\n",
        "\n",
        "  -There are 2 types of variables they are.\n",
        "\n",
        "   Type\n",
        "\n",
        "  -single Variable\n",
        "  .\n",
        "  -multiple Varible.\n",
        "\n",
        "  -multiple Variable is calssified in 2 Types.\n",
        "\n",
        "  -Multi*Multi.\n",
        "  -Multi*One.\n"
      ],
      "metadata": {
        "id": "RAHLrmefATGb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: sai = 21\n",
        "\n",
        "sai = 21\n",
        "print(sai)\n"
      ],
      "metadata": {
        "id": "hSvb2wk0C7hB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "shiva = 47\n",
        "print(shiva)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yf9cc043DI4w",
        "outputId": "3b0df248-f6e9-4f23-8176-51e98cb4870b"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "47\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "raju = 500\n",
        "print(raju)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K4LvOZBZDWfx",
        "outputId": "ddc2f144-09cc-4e55-92b0-8db9e3ed156e"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "500\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 5)**Print and identify the types**\n",
        "\n",
        "     "
      ],
      "metadata": {
        "id": "Tjjv2h6vDvy2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "asus,dell,hp = 37489,48039,63496\n",
        "lenova,apple,rog = 28748,46439,92404\n",
        "print(lenova)\n",
        "print(rog)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OnwxAVHtEWsy",
        "outputId": "b888b050-f030-4435-bded-35efc52d59f3"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "28748\n",
            "92404\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(type(dell))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ur4DFQuIFUc2",
        "outputId": "e53c37ba-7116-48c9-95a9-9ca34cca36d7"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'int'>\n"
          ]
        }
      ]
    }
  ]
}