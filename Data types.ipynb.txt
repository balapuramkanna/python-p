{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "O5ZNDXtYmZ8g"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "ym6zBGofmbmp"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#1)Explain About Data types?\n",
        "- Python Data types are the classification or categorization of data items.\n",
        "- Python Data Types are used to define the type of a variable.\n",
        "- It represents the kind of value that tells what operations can be performed on a particular data\n",
        "Data types is classfied int 2 types\n",
        "     - Basic\n",
        "     - Advanced\n",
        "- Basic :\n",
        "Basic Datatypes are As follows.\n",
        "     - int(integer).\n",
        "     - Floot (Decimals).\n",
        "     - Complex(combination of Real No. and imaginary No.)\n",
        "\n",
        "    "
      ],
      "metadata": {
        "id": "7GazcJMwm3Rg"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "8zjV26YlnDVF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 2)**Explain about int with examples**?\n",
        " - INTEGER.\n",
        "    - integers are the collection of whole numbers and negative numbers.\n",
        "    - Similar to whole numbers, integers also does not include the fractional part.\n",
        "    - Thus, we can say, integers are numbers that can be positive, negative or zero, but cannot be a fraction."
      ],
      "metadata": {
        "id": "fgvGAWJSnMxx"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "mjL6IKzSxLa4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Examples.\n",
        "\n",
        "  ## int\n",
        "\n",
        "ram = 246\n",
        "ravan = 212\n",
        "shiva = 9696\n",
        "hari = 88689\n",
        "print(ram)\n",
        "print(ravan)\n",
        "print(shiva)\n",
        "print(hari)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "79LwDFWBnP5k",
        "outputId": "90f0eb6e-661e-40a8-8796-47e61c7853d7"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "246\n",
            "212\n",
            "9696\n",
            "88689\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(type(ram))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4dZQ9-8btaTQ",
        "outputId": "baf39d6c-b5fc-42ba-e2ca-e8966df41ddc"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'int'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(type(ravan))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lN3v65bCtmfq",
        "outputId": "994e5907-0896-41a5-ac22-4cea5f507dae"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'int'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(type(shiva))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NkVlyaNRtyCw",
        "outputId": "1bfa6b76-5a26-4faa-e663-fb93c47ce565"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'int'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(type(hari))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "T--j1U79t4BP",
        "outputId": "83edb836-f0f3-47e7-fe9a-0587687a9056"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'int'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 3)**Explain about floot with examples**?\n",
        " - Floot.\n",
        "    - The float data types are used to store positive and negative numbers with a decimal point.\n",
        "    - Floating point numbers are decimal values or fractional numbers like 64983.5, 8578.48 75980.8 .\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "dQEu73HsuDn_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "rajamouli = 966.7\n",
        "sukumar = 567.98\n",
        "prashanthvarma = 433.5\n",
        "\n",
        "print(prashanthvarma)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lW1U1hwGui6t",
        "outputId": "5a273826-bbe9-4b0c-98a2-0b0f802eb34f"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "433.5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(sukumar)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nEaIXGVFvrL7",
        "outputId": "f6f92755-e787-431d-a374-2e62e3253018"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "567.98\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(rajamouli)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9peyF_7Dv8uG",
        "outputId": "6f8925ed-35b0-4428-affa-99d5ece582d6"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "966.7\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(type(sukumar))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5oik6ZBfwAJH",
        "outputId": "7305923a-6d46-4fcf-ce13-b681a73366d2"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'float'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(type(rajamouli))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "llczCzdPvwPp",
        "outputId": "d78f7851-33dd-4cd1-b70b-f5c085532110"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'float'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(type(prashanthvarma))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W_U_7S2KwlZD",
        "outputId": "c35c0696-75ae-4a2f-8883-fa5c98d8568e"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'float'>\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "####4)**Explain about complex with examples**?\n",
        " - Complex.\n",
        "     - Python complex() function returns a complex number ( real + imaginary) example (5+2j) when real and imaginary parts.\n",
        "     - it also converts a string to a complex number.\n",
        "\n",
        "\n",
        "1.   List item 2.   List item\n",
        "\n"
      ],
      "metadata": {
        "id": "L2p7Pwy9w1cE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "b=83+1j"
      ],
      "metadata": {
        "id": "Q6FZN3qQ4wmq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "a=8+2j\n",
        "print(a)\n",
        "print(type(a))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B6lFBy094X4S",
        "outputId": "f5c76a2f-b4dc-440c-cf6c-df510db6281f"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(8+2j)\n",
            "<class 'complex'>\n"
          ]
        }
      ]
    }
  ]
}